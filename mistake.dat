/*<<<<<<< HEAD
=======
>>>>>>> f31f02eaa751ccfdfba2ede0262545ab6a802075
//to compile use this line: g++ gui.cpp -o sfml-app -lsfml-graphics -lsfml-window -lsfml-system

#include <SFML/Graphics.hpp>
#include <cmath>
#include <string>
#include <iostream>
#include <vector>
#include "minesweeperMain.hpp"
using namespace std;

const unsigned int PLAYER_STARTING_X = 0;

const unsigned int PLAYER_STARTING_Y = 0;

const unsigned int FRAME_RATE = 30 ;

const unsigned int MICRO_SECONDS_IN_SECOND = 1000000;

void RevealTile(unsigned int boardX, unsigned int boardY, vector<vector<char>> mediumBoard, double scaleX, double scaleY);

void revealSurrondingTiles(unsigned int boardX, unsigned int boardY, vector<vector<char>> mediumBoard, double scaleX, double scaleY);


void revealAllBomb(vector<vector<char>> mediumBoard, double scaleX, double scaleY);


sf::Sprite LoadPlayerImage( );

sf::Sprite b[BSIZE][BSIZE];

// all images are defined here
sf::Image mineImage;
sf::Image flag0Image;
sf::Image flag1Image;
sf::Image flag2Image;
sf::Image flag3Image;
sf::Image flag4Image;
sf::Image flag5Image;
sf::Image flag6Image;
sf::Image flag7Image;
sf::Image flag8Image;
sf::Image ExplodedMineImage;
sf::Image flagFlagImage;
sf::Image CharacterImage;
sf::Image AIImage;
sf::Image defaultImage;

// all textures are defined here
sf::Texture mineTexture;
sf::Texture flag0Texture;
sf::Texture flag1Texture;
sf::Texture flag2Texture;
sf::Texture flag3Texture;
sf::Texture flag4Texture;
sf::Texture flag5Texture;
sf::Texture flag6Texture;
sf::Texture flag7Texture;
sf::Texture flag8Texture;
sf::Texture ExplodedMineTexture;
sf::Texture flagFlagTexture;
sf::Texture CharacterTexture;
sf::Texture AITexture;

void SetSize ( sf::Sprite & inSprite , double xSize, double ySize)
{
	double factorX = xSize / inSprite.getTextureRect().width;
	double factorY = ySize / inSprite.getTextureRect().height;
	inSprite.setScale(factorX, factorY);
}

int main()
{
  //sf::Sprite playerSprite = LoadPlayerImage();
	srand(time(NULL));
  vector<vector<char>> mediumBoard;
  createBoard(mediumBoard);
  print(mediumBoard);

	sf::Texture texture;
	if (!texture.loadFromFile(PLAYER_IMAGE_PATH))
		cout << "ERROR" << endl;
	sf::Sprite playerSprite(texture);

	double scaleX = sf::VideoMode::getDesktopMode().width/1622;
	double scaleY = sf::VideoMode::getDesktopMode().height/975;
	double scale = 0.5; 	//change this later to adapt to screen size
	sf::RectangleShape a[16][16];
	sf::Color grey(128,128,128);
	sf::Color darkGrey(192,192,192);
	sf::Color darkestGrey(215,215,215);

	// all images are loaded here
	mineImage.loadFromFile("Icons/mine.png");
	flag0Image.loadFromFile("Icons/0flag.png");
	flag1Image.loadFromFile("Icons/1flag.png");
	flag2Image.loadFromFile("Icons/2flag.png");
	flag3Image.loadFromFile("Icons/3flag.png");
	flag4Image.loadFromFile("Icons/4flag.png");
	flag5Image.loadFromFile("Icons/5flag.png");
	flag6Image.loadFromFile("Icons/6flag.png");
	flag7Image.loadFromFile("Icons/7flag.png");
	flag8Image.loadFromFile("Icons/8flag.png");
	ExplodedMineImage.loadFromFile("Icons/ExplodedMine.png");
	flagFlagImage.loadFromFile("Icons/flag.png");
	CharacterImage.loadFromFile("Icons/Gosnell.png");
	AIImage.loadFromFile("Icons/drtAI.png");
	defaultImage.loadFromFile("Icons/default.png");

	// all textures are loaded here
	mineTexture.loadFromImage(mineImage);
	flag0Texture.loadFromImage(flag0Image);
	flag1Texture.loadFromImage(flag1Image);
	flag2Texture.loadFromImage(flag2Image);
	flag3Texture.loadFromImage(flag3Image);
	flag4Texture.loadFromImage(flag4Image);
	flag5Texture.loadFromImage(flag5Image);
	flag6Texture.loadFromImage(flag6Image);
	flag7Texture.loadFromImage(flag7Image);
	flag8Texture.loadFromImage(flag8Image);
	ExplodedMineTexture.loadFromImage(ExplodedMineImage);
	flagFlagTexture.loadFromImage(flagFlagImage);
	CharacterTexture.loadFromImage(CharacterImage);
	AITexture.loadFromImage(AIImage);
	defaultTexture.loadFromImage(defaultImage);

	for(int i = 0; i < BSIZE; i++)
	{
		for(int j = 0; j < BSIZE; j++)
		{
			sf::Sprite sprite;
			sprite.setTexture(defaultTexture, true);
			sprite.setPosition(25*scaleX+50*i*scaleX, 25*scaleY+50*j*scaleY);
			SetSize(sprite,50*scaleX,50*scaleY);
			b[i][j] = sprite;
		}
	}
	vector<AI> AIs = loadAIs(mediumBoard, b);

	unsigned int playerX = PLAYER_STARTING_X ;
	unsigned int playerY = PLAYER_STARTING_Y ;
	sf::RenderWindow window(sf::VideoMode(950*scaleX, 950*scaleY), "Minesweeper");
	window.setFramerateLimit(FRAME_RATE);
	while(window.isOpen())
	{
	        for(unsigned int i = 0; i < AIs.size(); i = i + 1)
		{
		    if(AIs[i].isOnTarget())
		    {
			AIs[i].revealTileUnder(mediumBoard, scaleX, scaleY);
			AIs[i].selectNewTarget(mediumBoard, b);
		    }
		    AIs[i].moveTowardTarget();
		}
		sf::Event event;
		while (window.pollEvent(event))
		{
			if (event.type == sf::Event::Closed)
				window.close();
			else if (event.type == sf::Event::KeyPressed)
			{
				if (event.key.code == sf::Keyboard::Right)
				{
					if(playerX < BSIZE-1)
					{
						playerX = playerX + 1;
					}
				}
				else if (event.key.code == sf::Keyboard::Left)
				{
					if(playerX > 0)
					{
						playerX = playerX - 1 ;
					}
				}
				else if (event.key.code == sf::Keyboard::Up)
				{
					if(playerY > 0)
					{
						playerY = playerY - 1 ;
					}
				}
				else if (event.key.code == sf::Keyboard::Down)
				{
					if(playerY < BSIZE-1)
					{
						playerY = playerY + 1 ;
					}
				}
				else if (event.key.code == sf::Keyboard::Return)
				{
					if (b[playerX][playerY].getTexture() != &flagFlagTexture)
					{
						// Get the mouse position in tile coordinates
						unsigned int i = playerX;
						unsigned int j = playerY;

						unsigned int boardY = j;
						unsigned int boardX = i;
						revealSurrondingTiles (boardX, boardY, mediumBoard, scaleX, scaleY);
						if(b[playerX][playerY].getTexture() == &mineTexture){
						    cout <<"BOOM YOU FOUND MARKOWSKY";
						    revealAllBomb(mediumBoard, scaleX, scaleY);
						}
					}

				}
				else if (event.key.code == sf::Keyboard::F)
				{
					if (b[playerX][playerY].getTexture() == &flagFlagTexture)
					{
						sf::Sprite sprite;
						sprite.setTexture(defaultTexture, true);
						sprite.setPosition(25*scaleX+50*playerX*scaleX, 25*scaleY+50*playerY*scaleY);
						SetSize(sprite,50*scaleX,50*scaleY);
						b[playerX][playerY] = sprite;
					}
					else if (b[playerX][playerY].getTexture() == &defaultTexture)
					{
						sf::Sprite sprite;
						sprite.setTexture(flagFlagTexture, true);
						sprite.setPosition(25*scaleX+50*playerX*scaleX, 25*scaleY+50*playerY*scaleY);
						SetSize(sprite,50*scaleX,50*scaleY);
						b[playerX][playerY] = sprite;
					}
				}
			}
		}
		window.clear(darkGrey);
		for(int i = 0; i < BSIZE; i++)
		{
			for(int j = 0; j < BSIZE; j++)
			{
				window.draw(b[i][j]);
			}
		}
		for(unsigned int i = 0; i < AIs.size(); i = i + 1)
		{
		    AIs[i].sprite.setPosition(sf::Vector2f((25+50*AIs[i].x)*scaleX, (25+50*AIs[i].y)*scaleY));
		    SetSize(AIs[i].sprite, scaleX * 50, scaleY * 50 );
		    window.draw(AIs[i].sprite);
		}
		playerSprite.setPosition(sf::Vector2f((25+50*playerX)*scaleX, (25+50*playerY)*scaleY));
		SetSize(playerSprite, scaleX * 50, scaleY * 50 );
		//playerSprite.setScale(0.05,0.05);
		window.draw(playerSprite);
		//window.draw(shape);
		window.display();
	}
	return 0;
}


void RevealTile(unsigned int boardX, unsigned int boardY, vector<vector<char>> mediumBoard, double scaleX, double scaleY)
{
	// Draw a new outline color where the user clicked
	sf::Texture * temp = &flag2Texture;
	if ( mediumBoard[boardX][boardY] == 'O')
	{
		temp = &flag0Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '1')
	{
		temp = &flag1Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '2')
	{
		temp = &flag2Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '3')
	{
		temp = &flag3Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '4')
	{
		temp = &flag4Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '5')
	{
		temp = &flag5Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '6')
	{
		temp = &flag6Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '7')
	{
		temp = &flag7Texture;
	}
	else if ( mediumBoard[boardX][boardY] == '8')
	{
		temp = &flag8Texture;
	}
	else if ( mediumBoard[boardX][boardY] == 'B')
	{
		temp = &mineTexture;
	}
	cout << mediumBoard[boardX][boardY] << endl ;
	cout << boardX << " " << boardY << endl ;
	sf::Sprite sprite;
	sprite.setTexture(*temp, true);
	sprite.setPosition(25*scaleX+50*(boardX)*scaleX, 25*scaleY+50*(boardY)*scaleY);
	SetSize(sprite,50*scaleX,50*scaleY);
	b[(boardX)][(boardY)] = sprite;
}

void revealSurrondingTiles(unsigned int boardX, unsigned int boardY, vector<vector<char>> mediumBoard, double scaleX, double scaleY)
{
	if(isInBounds(boardX, boardY, BSIZE) == true)
	{
		if(b[boardX][boardY].getTexture() == &defaultTexture)
		{
			RevealTile(boardX,boardY,mediumBoard,scaleX, scaleY);
			if(mediumBoard[boardX][boardY] == 'O')
			{
				revealSurrondingTiles(boardX+1,boardY,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX-1,boardY,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX,boardY+1,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX,boardY-1,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX+1,boardY+1,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX-1,boardY+1,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX+1,boardY-1,mediumBoard,scaleX, scaleY);
				revealSurrondingTiles(boardX-1,boardY-1,mediumBoard,scaleX, scaleY);
			}
		}
	}
}


void revealAllBomb(vector<vector<char>> mediumBoard, double scaleX, double scaleY)
{
    for(int y = 0; y < BSIZE; y++)
    {
        for(int x = 0; x < BSIZE; x++)
        {
            if(mediumBoard[x][y] == 'B')
            {
            RevealTile(x,y,mediumBoard,scaleX, scaleY);
            }
        }
    }
}

sf::Sprite LoadPlayerImage ( )
{
	sf::Texture texture;
	if (!texture.loadFromFile(PLAYER_IMAGE_PATH))
		cout << "ERROR" << endl;
	sf::Sprite sprite(texture);
	return sprite;
}
<<<<<<< HEAD
=======
*/
